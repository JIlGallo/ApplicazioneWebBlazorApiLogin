@page "/modificapersona"
@using System.ComponentModel.DataAnnotations
@using ApplicazioneWebBlazorLogin.Services
@inject HttpClient Http
@inject IAuthenticationService AuthenticationService

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card mt-5">
                <div class="card-header bg-primary text-white">
                    <h3 class="mb-0">Modifica Utente</h3>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger">@errorMessage</div>
                    }

                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="alert alert-success">@successMessage</div>
                    }

                    <EditForm Model="@userModel" OnSubmit="HandleUsernameSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="form-group">
                            <label for="username">Nuovo Username:</label>
                            <InputText id="username" class="form-control" @bind-Value="userModel.Username" />
                        </div>
                        <br />
                        <button type="submit" class="btn btn-primary btn-block" disabled="@isLoadingUsername">
                            @if (isLoadingUsername)
                            {
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                <span class="sr-only">Caricamento...</span>
                            }
                            else
                            {
                                <span>Modifica Username</span>
                            }
                        </button>
                    </EditForm>
                    <br />
                    <EditForm Model="@userModel" OnSubmit="HandlePasswordSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="form-group">
                            <label for="oldPassword">Vecchia Password:</label>
                            <InputText id="oldPassword" type="password" class="form-control" @bind-Value="userModel.OldPassword" />
                        </div>

                        <div class="form-group">
                            <label for="newPassword">Nuova Password:</label>
                            <InputText id="newPassword" type="password" class="form-control" @bind-Value="userModel.NewPassword" />
                        </div>
                        <br />
                        <button type="submit" class="btn btn-primary btn-block" disabled="@isLoadingPassword">
                            @if (isLoadingPassword)
                            {
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                <span class="sr-only">Caricamento...</span>
                            }
                            else
                            {
                                <span>Modifica Password</span>
                            }
                        </button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private UserModel userModel = new UserModel();
    private string errorMessage = "";
    private string successMessage = "";
    private bool isLoadingUsername = false;
    private bool isLoadingPassword = false;

    private async Task HandleUsernameSubmit()
    {
        isLoadingUsername = true;
        errorMessage = "";
        successMessage = "";

        try
        {
            if (await AuthenticationService.UpdateUsername(userModel.Username))
            {
                successMessage = "Username modificato con successo!";
                userModel.Username = ""; // Reimposta il campo username
            }
            else
            {
                errorMessage = "Errore durante la modifica dell'username.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Errore imprevisto: {ex.Message}";
        }
        finally
        {
            isLoadingUsername = false;
        }
    }

    private async Task HandlePasswordSubmit()
    {
        isLoadingPassword = true;
        errorMessage = "";
        successMessage = "";

        try
        {
            if (await AuthenticationService.UpdatePassword(userModel.OldPassword, userModel.NewPassword))
            {
                successMessage = "Password modificata con successo!";
                userModel.OldPassword = ""; // Reimposta i campi password
                userModel.NewPassword = "";
            }
            else
            {
                errorMessage = "Errore durante la modifica della password.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Errore imprevisto: {ex.Message}";
        }
        finally
        {
            isLoadingPassword = false;
        }
    }

    public class UserModel
    {
        [Required(ErrorMessage = "Il campo Username è obbligatorio.")]
        public string Username { get; set; } = "";

        [Required(ErrorMessage = "Il campo Old Password è obbligatorio.")]
        public string OldPassword { get; set; } = "";

        [MinLength(6, ErrorMessage = "Il campo Password deve avere almeno 6 lettere o cifre.")]
        public string NewPassword { get; set; } = "";
    }
}